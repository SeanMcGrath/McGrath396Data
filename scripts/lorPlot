#!/usr/bin/env python

from csv import reader
from argparse import ArgumentParser
from numpy import linspace
import matplotlib.pyplot as plt, seaborn as sns
import sys
import re


# Constants
DEFAULT_POINT_COUNT = 10000
DEFAULT_LORENTZIAN_WIDTH = 20

def lorentzian(x,amp, ctr, width):
    numerator =  (width**2 )
    denominator = ( x - ctr )**2 + width**2
    return amp*(numerator/denominator)

def lorentzianSum(x, freqs, amps, width):
    return sum([lorentzian(x, amp, freq, width) for freq, amp in zip(freqs, amps)])

def main(args):

    parser = ArgumentParser(description = 'Fit a lorentzian curve to simulated Raman spectral data.')
    parser.add_argument('files', type=str, nargs='+', help='.csv files generated by ramanparse')
    parser.add_argument('-p','--points', type=int, default=DEFAULT_POINT_COUNT, help='Number of points in output plot - sets resolution.')
    parser.add_argument('-w', '--width', type=float, default=DEFAULT_LORENTZIAN_WIDTH, help='FWHM of each lorentzian in the plot.')
    parser.add_argument('-t', '--title', type=str, help='Title of resulting plot.')
    parser.add_argument('--set-context', type=str, dest='context', help='Seaborn plot formatting context.')
    parser.add_argument('--limits', type=float, nargs=2, dest='limits', help='Limits of plot x axis')
    args = parser.parse_args(args)

    try:
        sns.set_context(args.context)
    except:
        print('{} is not a valid Seaborn context.'.format(args.context))

    try:
        readers = [reader(open(f, 'r')) for f in args.files]
    except Exception as e:
        print(e.message)
        return 2

    for i in range(0, len(readers)):

        try:
            headers = next(readers[i])
            data = [(float(row[0]), float(row[1])) for row in readers[i] if row[0] not in ['Frequency']]
        except:
            print('{} is not formatted as a comma-separated list of numbers only.'.format(args.files[i]))
            return 2

        frequencies = [tup[0] for tup in data]
        intensities = [tup[1] for tup in data]

        xData = linspace(0, max(frequencies), args.points)
        legend_entry = [item for item in args.files[i].split('/') if re.match(r'[0-9]+ps$', item)][0]
        plt.plot(xData, lorentzianSum(xData, frequencies, intensities, args.width), label=legend_entry)

    if args.limits:
        plt.xlim(args.limits[0], args.limits[1])
    plt.xlabel(headers[0])
    plt.ylabel(headers[1])
    if args.title:
        plt.title(args.title)
    plt.legend()
    plt.show()
    return 0
    
if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
