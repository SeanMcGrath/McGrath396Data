#!/usr/bin/env python

from raman import Spectrum
from argparse import ArgumentParser
from numpy import array, mean, linspace
import matplotlib.pyplot as plt
import seaborn as sns
import sys
import re


def main(args):

    parser = ArgumentParser(description = 'Fit a lorentzian curve to simulated Raman spectral data.')
    parser.add_argument('files', type=str, nargs='+', help='.csv files generated by ramanparse')
    parser.add_argument('-p','--points', type=int, default=Spectrum.NUMBER_OF_POINTS, help='Number of points in output plot - sets resolution.')
    parser.add_argument('-w', '--width', type=float, default=Spectrum.LORENTZIAN_WIDTH, help='FWHM of each lorentzian in the plot.')
    parser.add_argument('-t', '--title', type=str, help='Title of resulting plot.')
    parser.add_argument('--set-context', type=str, dest='context', help='Seaborn plot formatting context.')
    parser.add_argument('--limits', type=float, nargs=4, dest='limits', help='Limits of plot x axis, followed by those for the y axis')
    parser.add_argument('--average', action='store_true', help='average over input waveform instead of plotting separately')
    args = parser.parse_args(args)

    # Seaborn manipulation
    try:
        sns.set_context(args.context)
    except:
        print('{} is not a valid Seaborn context.'.format(args.context))

    spectra = [Spectrum.from_csv(csv_file) for csv_file in args.files if csv_file.endswith('.csv')]

    # Average
    if args.average:
        # Compute lorentzians
        lorentzians = [spectrum.lorentzian for spectrum in spectra]
        lorentzians = array(lorentzians)
        average = mean(lorentzians, axis=0)
        max_x = max([spectrum.x_array[-1] for spectrum in spectra])
        plt.plot(linspace(0, max_x, args.points), average)

    # Individual    
    else:
        for i in range(len(spectra)):
            try:
                legend_entry = [item for item in args.files[i].split('/') if re.match(r'[0-9]+ps$', item)][0]
            except:
                legend_entry = None
            ax = plt.gca()
            spectra[i].plot(ax, label=legend_entry)

    # Set plot limits and labels
    if args.limits:
        plt.xlim(args.limits[0], args.limits[1])
        plt.ylim(args.limits[2], args.limits[3])
        ax = plt.gca()
        ax.relim()
        ax.autoscale_view()

    #plt.xlabel(headers[0])
    #plt.ylabel(headers[1])
    if args.title:
        plt.title(args.title)

    # Display plot
    plt.legend()
    plt.show()
    return 0

sys.exit(main(sys.argv[1:]))
